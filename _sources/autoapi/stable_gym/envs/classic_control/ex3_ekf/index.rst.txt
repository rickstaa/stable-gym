:py:mod:`stable_gym.envs.classic_control.ex3_ekf`
=================================================

.. py:module:: stable_gym.envs.classic_control.ex3_ekf

.. autoapi-nested-parse::

   Noisy master slave system (Ex3EKF) gymnasium environment.

   Dynamics
   ========

   The dynamics of the system whose state is to be estimated are given by:

   .. math::
      :nowrap:

      \[
      \begin{split}
      x(k+1) &= A x(k) + w(k) \\
      \end{split}
      \]

   In which the state vector :math:`(x(k)` is given by:

   .. math::
      :nowrap:

      \[
      \begin{align*}
      x_1 &: \text{angle} \\
      x_2 &: \text{frequency} \\
      x_3 &: \text{amplitude}
      \end{align*}
      \]

   and the measurement vector :math:`(y(k))` is given by:

   .. math::
      :nowrap:

      \[
      \begin{split}
      y(k) &= x_3(k) \cdot \sin(x_1(k)) + v(k) \\
      A &= \begin{bmatrix}
          1 & dt & 0 \\
          0 & 1 & 0 \\
          0 & 0 & 1
          \end{bmatrix} \\
      x(0) &\sim \mathcal{N}\left(\begin{bmatrix}0 \\ 10 \\ 1\end{bmatrix}, \begin{bmatrix}
          3 & 0 & 0 \\
          0 & 3 & 0 \\
          0 & 0 & 3
          \end{bmatrix}\right) \\
      w(k) &\sim \mathcal{N}\left(\begin{bmatrix}0 \\ 0 \\ 0\end{bmatrix}, \begin{bmatrix}
          \frac{1}{3}dt^3 q_1 & \frac{1}{2}dt^2 q_1 & 0 \\
          \frac{1}{2}dt^2 q_1 & dt q_1 & 0 \\
          0 & 0 & dt q_2
          \end{bmatrix}\right) \\
      v(k) &\sim \mathcal{N}(0, 1)
      \end{split}
      \]

   Estimator design:

   .. math::
      :nowrap:

      \[
      \begin{split}
      \hat{x}(k+1) &= A \hat{x}(k) + u \\
      \text{where } u &= [u1, u2, u3]', \ u = l(\hat{x}(k), y(k)) \text{ come from the policy network } l(.,.).
      \end{split}
      \]



Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   ex3_ekf/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   stable_gym.envs.classic_control.ex3_ekf.Ex3EKF




.. py:class:: Ex3EKF(render_mode=None, clipped_action=True)


   Bases: :py:obj:`gymnasium.Env`

   Noisy master slave system

   Description:
       The goal of the agent in the Ex3EKF environment is to act in such a way that
       estimator perfectly estimated the original noisy system. By doing this it serves
       as a RL based stationary Kalman filter. First presented by `Wu et al. 2023`_.

   Observation:
       **Type**: Box(4)

       +-----+------------------------+----------------------+--------------------+
       | Num | Observation            | Min                  | Max                |
       +=====+========================+======================+====================+
       | 0   | The estimated angle    | -10000 rad           | 10000 rad          |
       +-----+------------------------+----------------------+--------------------+
       | 1   | The estimated frequency| -10000 hz            | 10000 hz           |
       +-----+------------------------+----------------------+--------------------+
       | 2   | Actual angle           | -10000 rad           | 10000 rad          |
       +-----+------------------------+----------------------+--------------------+
       | 3   | Actual frequency       | -10000 rad           | 10000 rad          |
       +-----+------------------------+----------------------+--------------------+

   Actions:
       **Type**: Box(2)

       +-----+-----------------------------------------------+
       | Num | Action                                        |
       +=====+===============================================+
       | 0   | First action coming from the RL Kalman filter |
       +-----+-----------------------------------------------+
       | 1   | Second action coming from the RL Kalman filter|
       +-----+-----------------------------------------------+

   Cost:
       A cost, computed as the sum of the squared differences between the estimated and the actual states:

       .. math::

           C = {(\hat{x}_1 - x_1)}^2 + {(\hat{x}_2 - x_2)}^2

   Starting State:
       All observations are assigned a uniform random value in ``[-0.05..0.05]``

   Episode Termination:
       -   When the step cost is higher than 100.

   Solved Requirements:
       Considered solved when the average cost is lower than 300.

   .. attribute:: state

      The current system state.

      :type: numpy.ndarray

   .. attribute:: t

      The current time step.

      :type: float

   .. attribute:: dt

      The environment step size. Also available as :attr:`.tau`.

      :type: float

   .. attribute:: sigma

      The variance of the system noise.

      :type: float

   .. _`Wu et al. 2023`: https://www.sciencedirect.com/science/article/pii/S0005109823001528

   Initialise new Ex3EKF environment instance.

   :param render_mode: The render mode you want to use. Defaults to
                       ``None``. Not used in this environment.
   :type render_mode: str, optional
   :param clipped_action: Whether the actions should be clipped if
                          they are greater than the set action limit. Defaults to ``True``.
   :type clipped_action: str, optional

   .. py:property:: tau

      Alias for the environment step size. Done for compatibility with the
      other gymnasium environments.

   .. py:property:: physics_time

      Returns the physics time. Alias for :attr:`.t`.

   .. py:method:: step(action)

      Take step into the environment.

      :param action: The action we want to perform in the environment.
      :type action: numpy.ndarray

      :returns:

                tuple containing:

                    -   obs (:obj:`np.ndarray`): Environment observation.
                    -   cost (:obj:`float`): Cost of the action.
                    -   terminated (:obj:`bool`): Whether the episode is terminated.
                    -   truncated (:obj:`bool`): Whether the episode was truncated. This
                        value is set by wrappers when for example a time limit is reached or
                        the agent goes out of bounds.
                    -   info (:obj:`dict`): Additional information about the environment.
      :rtype: (tuple)


   .. py:method:: reset(seed=None, options=None)

      Reset gymnasium environment.

      :param seed: A random seed for the environment. By default
                   `None``.
      :type seed: int, optional
      :param options: A dictionary containing additional options for
                      resetting the environment. By default ``None``. Not used in this
                      environment.
      :type options: dict, optional

      :returns:

                tuple containing:

                    -   obs (:obj:`numpy.ndarray`): Initial environment observation.
                    -   info (:obj:`dict`): Dictionary containing additional information.
      :rtype: (tuple)


   .. py:method:: reference(x)

      Returns the current value of the periodic reference signal that is tracked by
      the Synthetic oscillatory network.

      :param x: The reference value.
      :type x: float

      :returns: The current reference value.
      :rtype: float


   .. py:method:: render(mode='human')
      :abstractmethod:

      Render one frame of the environment.

      :param mode: Gym rendering mode. The default mode will do something
                   human friendly, such as pop up a window.
      :type mode: str, optional

      :raises NotImplementedError: Will throw a NotImplimented error since the render
          method has not yet been implemented.

      .. note:: This currently is not yet implemented.



